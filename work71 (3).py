import logging
import sqlite3
from random import choice
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –æ—Ç @BotFather
BOT_TOKEN = "8466230710:AAHcjNHexZeab-TKlm2p2_hQ0oqxL3ogXVA"

# ========== –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ==========

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('database.db')
    cur = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –∞—Ä—Ç–æ–≤
    cur.execute('''
        CREATE TABLE IF NOT EXISTS arts (
            art_id INTEGER PRIMARY KEY AUTOINCREMENT,
            owner_id INTEGER,
            file_id TEXT,
            caption TEXT,
            likes INTEGER DEFAULT 0,
            dislikes INTEGER DEFAULT 0,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (owner_id) REFERENCES users (user_id)
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∞–∫—Ü–∏–π (–ª–∞–π–∫–∏/–¥–∏–∑–ª–∞–π–∫–∏)
    cur.execute('''
        CREATE TABLE IF NOT EXISTS reactions (
            reaction_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            art_id INTEGER,
            type TEXT, -- 'like' –∏–ª–∏ 'dislike'
            FOREIGN KEY (user_id) REFERENCES users (user_id),
            FOREIGN KEY (art_id) REFERENCES arts (art_id),
            UNIQUE(user_id, art_id) -- —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –ª–∞–π–∫–Ω—É—Ç—å –¥–≤–∞–∂–¥—ã
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    cur.execute('''
        CREATE TABLE IF NOT EXISTS comments (
            comment_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            art_id INTEGER,
            text TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id),
            FOREIGN KEY (art_id) REFERENCES arts (art_id)
        )
    ''')

    conn.commit()
    conn.close()

def add_user(user_id, username):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É"""
    conn = sqlite3.connect('database.db')
    cur = conn.cursor()
    cur.execute(
        'INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)',
        (user_id, username)
    )
    conn.commit()
    conn.close()

def add_art(user_id, file_id, caption=""):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–∞ –≤ –±–∞–∑—É"""
    conn = sqlite3.connect('database.db')
    cur = conn.cursor()
    cur.execute(
        'INSERT INTO arts (owner_id, file_id, caption) VALUES (?, ?, ?)',
        (user_id, file_id, caption)
    )
    art_id = cur.lastrowid
    conn.commit()
    conn.close()
    return art_id

def get_unseen_art(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞—Ä—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–ª"""
    conn = sqlite3.connect('database.db')
    cur = conn.cursor()
    
    # –ò—â–µ–º –∞—Ä—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏
    cur.execute('''
        SELECT art_id, file_id, caption, likes, dislikes 
        FROM arts 
        WHERE art_id NOT IN (
            SELECT art_id FROM reactions WHERE user_id = ?
        ) AND owner_id != ?
        ORDER BY RANDOM()
        LIMIT 1
    ''', (user_id, user_id))
    
    art = cur.fetchone()
    conn.close()
    return art

def add_reaction(user_id, art_id, reaction_type):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ (–ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫)"""
    conn = sqlite3.connect('database.db')
    cur = conn.cursor()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
    cur.execute(
        'INSERT INTO reactions (user_id, art_id, type) VALUES (?, ?, ?)',
        (user_id, art_id, reaction_type)
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ arts
    if reaction_type == 'like':
        cur.execute('UPDATE arts SET likes = likes + 1 WHERE art_id = ?', (art_id,))
    else:
        cur.execute('UPDATE arts SET dislikes = dislikes + 1 WHERE art_id = ?', (art_id,))
    
    conn.commit()
    conn.close()

def add_comment(user_id, art_id, text):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    conn = sqlite3.connect('database.db')
    cur = conn.cursor()
    cur.execute(
        'INSERT INTO comments (user_id, art_id, text) VALUES (?, ?, ?)',
        (user_id, art_id, text)
    )
    conn.commit()
    conn.close()

def get_user_arts(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞—Ä—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('database.db')
    cur = conn.cursor()
    cur.execute('''
        SELECT art_id, file_id, caption, likes, dislikes 
        FROM arts 
        WHERE owner_id = ? 
        ORDER BY timestamp DESC
    ''', (user_id,))
    arts = cur.fetchall()
    conn.close()
    return arts

def get_user_stats(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('database.db')
    cur = conn.cursor()
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cur.execute('SELECT COUNT(*) FROM arts WHERE owner_id = ?', (user_id,))
    arts_count = cur.fetchone()[0]
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
    cur.execute('SELECT SUM(likes) FROM arts WHERE owner_id = ?', (user_id,))
    total_likes = cur.fetchone()[0] or 0
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∑–ª–∞–π–∫–æ–≤
    cur.execute('SELECT SUM(dislikes) FROM arts WHERE owner_id = ?', (user_id,))
    total_dislikes = cur.fetchone()[0] or 0
    
    conn.close()
    return arts_count, total_likes, total_dislikes

async def send_art_to_user(chat_id, context, user_id, art_data=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–Ω–æ–≤—ã–π –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π)"""
    if not art_data:
        art_data = get_unseen_art(user_id)
    
    if art_data:
        art_id, file_id, caption, likes, dislikes = art_data
        context.user_data['current_art_id'] = art_id
        
        text = f"–õ–∞–π–∫–æ–≤: {likes} | –î–∏–∑–ª–∞–π–∫–æ–≤: {dislikes}"
        if caption:
            text = f"{caption}\n\n{text}"
        
        keyboard = [
            [
                InlineKeyboardButton("‚ù§Ô∏è", callback_data='like'),
                InlineKeyboardButton("üëé", callback_data='dislike')
            ],
            [InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data='comment')],
            [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
            [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç", callback_data='next_art')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=file_id,
            caption=text,
            reply_markup=reply_markup
        )
        return True
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text="üéâ –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ä—Ç—ã! –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–∏ —Ä–∞–±–æ—Ç—ã."
        )
        return False

# ========== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ==========

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    add_user(user.id, user.username)
    
    keyboard = [
        [InlineKeyboardButton("üé® –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—Ä—Ç", callback_data='upload_art')],
        [InlineKeyboardButton("üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ç—ã", callback_data='view_arts')],
        [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='profile')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—Ä—Ç-—Å–æ–æ–±—â–µ—Å—Ç–≤–æ!\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏ –∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö.",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == 'upload_art':
        await query.edit_message_text(
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç) —Å –ø–æ–¥–ø–∏—Å—å—é (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å)."
        )
        context.user_data['waiting_for_art'] = True
        
    elif data == 'view_arts':
        art = get_unseen_art(user_id)
        if art:
            await send_art_to_user(query.message.chat_id, context, user_id, art)
            await query.delete_message()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        else:
            await query.edit_message_text("–ü–æ–∫–∞ –Ω–µ—Ç –∞—Ä—Ç–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    
    elif data in ['like', 'dislike']:
        art_id = context.user_data.get('current_art_id')
        if art_id:
            add_reaction(user_id, art_id, data)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç
            next_art = get_unseen_art(user_id)
            if next_art:
                await send_art_to_user(query.message.chat_id, context, user_id, next_art)
                await query.delete_message()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            else:
                await query.edit_message_text(
                    "üéâ –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ä—Ç—ã! –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ."
                )
        else:
            await query.edit_message_text("–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∞—Ä—Ç.")
    
    elif data == 'comment':
        await query.edit_message_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ —Å–æ–≤–µ—Ç:")
        context.user_data['waiting_for_comment'] = True
    
    elif data == 'next_art':
        art = get_unseen_art(user_id)
        if art:
            await send_art_to_user(query.message.chat_id, context, user_id, art)
            await query.delete_message()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        else:
            await query.edit_message_text("–ë–æ–ª—å—à–µ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∞—Ä—Ç–æ–≤! –ó–∞–≥–ª—è–Ω–∏ –ø–æ–∑–∂–µ.")
    
    elif data == 'profile':
        arts_count, total_likes, total_dislikes = get_user_stats(user_id)
        user_arts = get_user_arts(user_id)
        
        if user_arts:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
            current_art_index = context.user_data.get('profile_art_index', 0)
            art_id, file_id, caption, likes, dislikes = user_arts[current_art_index]
            
            profile_text = (
                f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n"
                f"üìä –ê—Ä—Ç–æ–≤: {arts_count}\n"
                f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤: {total_likes}\n"
                f"üëé –î–∏–∑–ª–∞–π–∫–æ–≤: {total_dislikes}\n\n"
                f"–ê—Ä—Ç {current_art_index + 1}/{len(user_arts)}"
            )
            
            if caption:
                profile_text += f"\n\n{caption}"
            
            keyboard = []
            if len(user_arts) > 1:
                keyboard.append([
                    InlineKeyboardButton("‚¨ÖÔ∏è", callback_data='prev_art'),
                    InlineKeyboardButton(f"{current_art_index + 1}/{len(user_arts)}", callback_data='profile_stats'),
                    InlineKeyboardButton("‚û°Ô∏è", callback_data='next_art_profile')
                ])
            
            keyboard.extend([
                [InlineKeyboardButton("üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ç—ã", callback_data='view_arts')],
                [InlineKeyboardButton("üé® –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π –∞—Ä—Ç", callback_data='upload_art')],
                [InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='profile_stats')]
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=file_id,
                caption=profile_text,
                reply_markup=reply_markup
            )
            await query.delete_message()
        else:
            await query.edit_message_text(
                f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n"
                f"üìä –ê—Ä—Ç–æ–≤: 0\n"
                f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤: 0\n"
                f"üëé –î–∏–∑–ª–∞–π–∫–æ–≤: 0\n\n"
                "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞—Ä—Ç–æ–≤. –ó–∞–≥—Ä—É–∑–∏ –ø–µ—Ä–≤—ã–π!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üé® –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—Ä—Ç", callback_data='upload_art')],
                    [InlineKeyboardButton("üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ç—ã", callback_data='view_arts')]
                ])
            )
    
    elif data in ['next_art_profile', 'prev_art']:
        user_arts = get_user_arts(user_id)
        if user_arts:
            current_index = context.user_data.get('profile_art_index', 0)
            
            if data == 'next_art_profile' and current_index < len(user_arts) - 1:
                current_index += 1
            elif data == 'prev_art' and current_index > 0:
                current_index -= 1
            
            context.user_data['profile_art_index'] = current_index
            art_id, file_id, caption, likes, dislikes = user_arts[current_index]
            
            arts_count, total_likes, total_dislikes = get_user_stats(user_id)
            profile_text = (
                f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n"
                f"üìä –ê—Ä—Ç–æ–≤: {arts_count}\n"
                f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤: {total_likes}\n"
                f"üëé –î–∏–∑–ª–∞–π–∫–æ–≤: {total_dislikes}\n\n"
                f"–ê—Ä—Ç {current_index + 1}/{len(user_arts)}\n"
                f"‚ù§Ô∏è {likes} | üëé {dislikes}"
            )
            
            if caption:
                profile_text += f"\n\n{caption}"
            
            keyboard = []
            if len(user_arts) > 1:
                keyboard.append([
                    InlineKeyboardButton("‚¨ÖÔ∏è", callback_data='prev_art'),
                    InlineKeyboardButton(f"{current_index + 1}/{len(user_arts)}", callback_data='profile_stats'),
                    InlineKeyboardButton("‚û°Ô∏è", callback_data='next_art_profile')
                ])
            
            keyboard.extend([
                [InlineKeyboardButton("üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ç—ã", callback_data='view_arts')],
                [InlineKeyboardButton("üé® –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π –∞—Ä—Ç", callback_data='upload_art')]
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_media(
                media=InputMediaPhoto(media=file_id, caption=profile_text),
                reply_markup=reply_markup
            )
    
    elif data == 'profile_stats':
        arts_count, total_likes, total_dislikes = get_user_stats(user_id)
        await query.edit_message_text(
            f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üé® –ê—Ä—Ç–æ–≤: {arts_count}\n"
            f"‚ù§Ô∏è –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {total_likes}\n"
            f"üëé –í—Å–µ–≥–æ –¥–∏–∑–ª–∞–π–∫–æ–≤: {total_dislikes}\n"
            f"üìà –†–µ–π—Ç–∏–Ω–≥: {total_likes - total_dislikes}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üëà –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data='profile')],
                [InlineKeyboardButton("üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ç—ã", callback_data='view_arts')]
            ])
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –º–µ–¥–∏–∞"""
    user_id = update.effective_user.id
    
    if context.user_data.get('waiting_for_art'):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∞—Ä—Ç
        if update.message.photo or update.message.document:
            if update.message.photo:
                file_id = update.message.photo[-1].file_id
            else:
                file_id = update.message.document.file_id
            
            caption = update.message.caption or ""
            art_id = add_art(user_id, file_id, caption)
            
            context.user_data['waiting_for_art'] = False
            await update.message.reply_text(
                "–¢–≤–æ–π –∞—Ä—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üé®\n"
                "–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –µ–≥–æ –æ—Ü–µ–Ω–∏—Ç—å!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ç—ã", callback_data='view_arts')],
                    [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='profile')]
                ])
            )
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
    
    elif context.user_data.get('waiting_for_comment'):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        art_id = context.user_data.get('current_art_id')
        if art_id and update.message.text:
            add_comment(user_id, art_id, update.message.text)
            context.user_data['waiting_for_comment'] = False
            
            # –ü–æ—Å–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç
            next_art = get_unseen_art(user_id)
            if next_art:
                await send_art_to_user(update.message.chat_id, context, user_id, next_art)
            else:
                await update.message.reply_text(
                    "üéâ –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∞—Ä—Ç—ã! –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
                        [InlineKeyboardButton("üé® –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—Ä—Ç", callback_data='upload_art')]
                    ])
                )
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.ALL, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()