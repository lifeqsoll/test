import logging
import sqlite3
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –æ—Ç @BotFather
BOT_TOKEN = "8466230710:AAHcjNHexZeab-TKlm2p2_hQ0oqxL3ogXVA"

# ========== –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ==========

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('database.db')
    cur = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –∞—Ä—Ç–æ–≤
    cur.execute('''
        CREATE TABLE IF NOT EXISTS arts (
            art_id INTEGER PRIMARY KEY AUTOINCREMENT,
            owner_id INTEGER,
            file_id TEXT,
            caption TEXT,
            likes INTEGER DEFAULT 0,
            dislikes INTEGER DEFAULT 0,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (owner_id) REFERENCES users (user_id)
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∞–∫—Ü–∏–π (–ª–∞–π–∫–∏/–¥–∏–∑–ª–∞–π–∫–∏)
    cur.execute('''
        CREATE TABLE IF NOT EXISTS reactions (
            reaction_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            art_id INTEGER,
            type TEXT, -- 'like' –∏–ª–∏ 'dislike'
            FOREIGN KEY (user_id) REFERENCES users (user_id),
            FOREIGN KEY (art_id) REFERENCES arts (art_id),
            UNIQUE(user_id, art_id) -- —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –ª–∞–π–∫–Ω—É—Ç—å –¥–≤–∞–∂–¥—ã
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    cur.execute('''
        CREATE TABLE IF NOT EXISTS comments (
            comment_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            art_id INTEGER,
            text TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id),
            FOREIGN KEY (art_id) REFERENCES arts (art_id)
        )
    ''')

    conn.commit()
    conn.close()

def add_user(user_id, username):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É"""
    conn = sqlite3.connect('database.db')
    cur = conn.cursor()
    cur.execute(
        'INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)',
        (user_id, username)
    )
    conn.commit()
    conn.close()

def add_art(user_id, file_id, caption=""):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–∞ –≤ –±–∞–∑—É"""
    conn = sqlite3.connect('database.db')
    cur = conn.cursor()
    cur.execute(
        'INSERT INTO arts (owner_id, file_id, caption) VALUES (?, ?, ?)',
        (user_id, file_id, caption)
    )
    art_id = cur.lastrowid
    conn.commit()
    conn.close()
    return art_id

def get_unseen_art(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞—Ä—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–ª"""
    conn = sqlite3.connect('database.db')
    cur = conn.cursor()
    
    # –ò—â–µ–º –∞—Ä—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏
    cur.execute('''
        SELECT art_id, file_id, caption, likes, dislikes 
        FROM arts 
        WHERE art_id NOT IN (
            SELECT art_id FROM reactions WHERE user_id = ?
        ) AND owner_id != ?
        ORDER BY RANDOM()
        LIMIT 1
    ''', (user_id, user_id))
    
    art = cur.fetchone()
    conn.close()
    return art

def add_reaction(user_id, art_id, reaction_type):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ (–ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫)"""
    conn = sqlite3.connect('database.db')
    cur = conn.cursor()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
    cur.execute(
        'INSERT INTO reactions (user_id, art_id, type) VALUES (?, ?, ?)',
        (user_id, art_id, reaction_type)
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ arts
    if reaction_type == 'like':
        cur.execute('UPDATE arts SET likes = likes + 1 WHERE art_id = ?', (art_id,))
    else:
        cur.execute('UPDATE arts SET dislikes = dislikes + 1 WHERE art_id = ?', (art_id,))
    
    conn.commit()
    conn.close()

def add_comment(user_id, art_id, text):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    conn = sqlite3.connect('database.db')
    cur = conn.cursor()
    cur.execute(
        'INSERT INTO comments (user_id, art_id, text) VALUES (?, ?, ?)',
        (user_id, art_id, text)
    )
    conn.commit()
    conn.close()

def get_art_by_id(art_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä—Ç–∞ –ø–æ ID"""
    conn = sqlite3.connect('database.db')
    cur = conn.cursor()
    cur.execute('''
        SELECT art_id, file_id, caption, likes, dislikes 
        FROM arts 
        WHERE art_id = ?
    ''', (art_id,))
    art = cur.fetchone()
    conn.close()
    return art

def get_user_arts(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞—Ä—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('database.db')
    cur = conn.cursor()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cur.execute('''
        SELECT 
            COUNT(*) as total_arts,
            SUM(likes) as total_likes,
            SUM(dislikes) as total_dislikes
        FROM arts 
        WHERE owner_id = ?
    ''', (user_id,))
    
    stats = cur.fetchone()
    
    # –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    cur.execute('''
        SELECT art_id, file_id, caption, likes, dislikes, timestamp
        FROM arts 
        WHERE owner_id = ?
        ORDER BY timestamp DESC
    ''', (user_id,))
    
    arts = cur.fetchall()
    conn.close()
    
    return stats, arts

async def send_art_to_user(chat_id, context, user_id, art=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not art:
        art = get_unseen_art(user_id)
    
    if art:
        art_id, file_id, caption, likes, dislikes = art
        context.user_data['current_art_id'] = art_id
        
        text = f"–õ–∞–π–∫–æ–≤: {likes} | –î–∏–∑–ª–∞–π–∫–æ–≤: {dislikes}"
        if caption:
            text = f"{caption}\n\n{text}"
        
        keyboard = [
            [
                InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫", callback_data=f'like_{art_id}'),
                InlineKeyboardButton("üëé –î–∏–∑–ª–∞–π–∫", callback_data=f'dislike_{art_id}')
            ],
            [InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f'comment_{art_id}')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=file_id,
            caption=text,
            reply_markup=reply_markup
        )
        return True
    else:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=chat_id,
            text="üéâ –í—ã –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ä—Ç—ã! –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–∏ —Ä–∞–±–æ—Ç—ã.",
            reply_markup=reply_markup
        )
        return False

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, username: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –∞—Ä—Ç–∞–º–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    stats, arts = get_user_arts(user_id)
    total_arts, total_likes, total_dislikes = stats
    
    if not arts:
        # –ï—Å–ª–∏ –∞—Ä—Ç–æ–≤ –Ω–µ—Ç
        profile_text = (
            f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è** {username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n\n"
            "üé® –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–æ–≤.\n"
            "–ù–∞–∂–º–∏—Ç–µ '–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—Ä—Ç', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π!"
        )
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                profile_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                profile_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        return
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å –∞—Ä—Ç–∞–º–∏
    media_group = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä—Ç —Å —Ç–µ–∫—Å—Ç–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    first_art_id, first_file_id, first_caption, first_likes, first_dislikes, first_timestamp = arts[0]
    
    profile_text = (
        f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è** {username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n\n"
        f"üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        f"‚Ä¢ üé® –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞—Ä—Ç–æ–≤: {total_arts}\n"
        f"‚Ä¢ ‚ù§Ô∏è –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {total_likes or 0}\n"
        f"‚Ä¢ üëé –í—Å–µ–≥–æ –¥–∏–∑–ª–∞–π–∫–æ–≤: {total_dislikes or 0}\n\n"
        f"üìÅ **–í–∞—à–∏ –∞—Ä—Ç—ã ({len(arts)}):**\n"
    )
    
    # –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞—Ä—Ç–∞ (—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π)
    first_art_text = profile_text + f"\nüé® **–ê—Ä—Ç #1** (ID: {first_art_id})\n"
    first_art_text += f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤: {first_likes} | üëé –î–∏–∑–ª–∞–π–∫–æ–≤: {first_dislikes}\n"
    if first_caption:
        first_art_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {first_caption}"
    
    media_group.append(InputMediaPhoto(
        media=first_file_id,
        caption=first_art_text,
        parse_mode='Markdown'
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞—Ä—Ç—ã
    for i, (art_id, file_id, caption, likes, dislikes, timestamp) in enumerate(arts[1:], 2):
        art_text = f"üé® **–ê—Ä—Ç #{i}** (ID: {art_id})\n"
        art_text += f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤: {likes} | üëé –î–∏–∑–ª–∞–π–∫–æ–≤: {dislikes}\n"
        if caption:
            art_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {caption}"
        
        media_group.append(InputMediaPhoto(
            media=file_id,
            caption=art_text,
            parse_mode='Markdown'
        ))
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π
        try:
            await update.callback_query.message.delete()
        except:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        messages = await context.bot.send_media_group(
            chat_id=update.callback_query.message.chat_id,
            media=media_group
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await context.bot.send_message(
            chat_id=update.callback_query.message.chat_id,
            text="‚¨ÜÔ∏è **–í—Å–µ –≤–∞—à–∏ –∞—Ä—Ç—ã –≤—ã—à–µ** ‚¨ÜÔ∏è",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        messages = await context.bot.send_media_group(
            chat_id=update.message.chat_id,
            media=media_group
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await update.message.reply_text(
            "‚¨ÜÔ∏è **–í—Å–µ –≤–∞—à–∏ –∞—Ä—Ç—ã –≤—ã—à–µ** ‚¨ÜÔ∏è",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

# ========== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ==========

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    add_user(user.id, user.username)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    keyboard = [
        [InlineKeyboardButton("üé® –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—Ä—Ç", callback_data='upload_art')],
        [InlineKeyboardButton("üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ç—ã", callback_data='view_arts')],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å (callback), —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if update.callback_query:
        await update.callback_query.edit_message_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—Ä—Ç-—Å–æ–æ–±—â–µ—Å—Ç–≤–æ!\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏ –∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö.",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    else:
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—Ä—Ç-—Å–æ–æ–±—â–µ—Å—Ç–≤–æ!\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏ –∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö.",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    username = query.from_user.username or query.from_user.first_name
    data = query.data
    
    if data == 'upload_art':
        await query.edit_message_text(
            "üì§ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∫–∞–∫ —Ñ–æ—Ç–æ) —Å –ø–æ–¥–ø–∏—Å—å—é (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å).\n\n"
            "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—ã –≤–µ—Ä–Ω–µ—à—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        context.user_data['waiting_for_art'] = True
        
    elif data == 'view_arts':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä—Ç
        success = await send_art_to_user(query.message.chat_id, context, user_id)
        if not success:
            await query.edit_message_text("–ü–æ–∫–∞ –Ω–µ—Ç –∞—Ä—Ç–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    
    elif data == 'profile':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞—Ä—Ç–∞–º–∏
        await show_profile(update, context, user_id, username)
    
    elif data.startswith('like_') or data.startswith('dislike_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–æ–≤/–¥–∏–∑–ª–∞–π–∫–æ–≤
        art_id = int(data.split('_')[1])
        reaction_type = 'like' if data.startswith('like_') else 'dislike'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç –∞—Ä—Ç
        conn = sqlite3.connect('database.db')
        cur = conn.cursor()
        cur.execute('SELECT * FROM reactions WHERE user_id = ? AND art_id = ?', (user_id, art_id))
        existing_reaction = cur.fetchone()
        conn.close()
        
        if existing_reaction:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ü–µ–Ω–∏–≤–∞–ª —ç—Ç–æ—Ç –∞—Ä—Ç
            await query.answer("–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ—Ç –∞—Ä—Ç! ‚ùå", show_alert=True)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
            add_reaction(user_id, art_id, reaction_type)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—Ä—Ç–æ–º)
            reaction_text = "‚ù§Ô∏è –õ–∞–π–∫" if reaction_type == 'like' else "üëé –î–∏–∑–ª–∞–π–∫"
            await query.answer(f"{reaction_text} –∑–∞—Å—á–∏—Ç–∞–Ω! ‚úÖ")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (–Ω–µ —É–¥–∞–ª—è—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π)
            await send_art_to_user(query.message.chat_id, context, user_id)
    
    elif data.startswith('comment_'):
        art_id = int(data.split('_')[1])
        context.user_data['waiting_for_comment'] = True
        context.user_data['comment_art_id'] = art_id
        
        await query.edit_message_text(
            f"üí¨ –ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∞—Ä—Ç–∞:\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å—é–¥–∞."
        )
    
    elif data == 'back_to_menu':
        await start(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –º–µ–¥–∏–∞"""
    user_id = update.effective_user.id
    chat_id = update.message.chat_id
    
    if context.user_data.get('waiting_for_art'):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∞—Ä—Ç
        if update.message.photo:
            file_id = update.message.photo[-1].file_id
            caption = update.message.caption or ""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä—Ç –≤ –±–∞–∑—É
            art_id = add_art(user_id, file_id, caption)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data['waiting_for_art'] = False
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
            keyboard = [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ –¢–≤–æ–π –∞—Ä—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! (ID: {art_id})\n"
                "–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –µ–≥–æ –æ—Ü–µ–Ω–∏—Ç—å!",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ (–Ω–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç)!")
    
    elif context.user_data.get('waiting_for_comment'):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        art_id = context.user_data.get('comment_art_id')
        if art_id and update.message.text:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            add_comment(user_id, art_id, update.message.text)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data['waiting_for_comment'] = False
            context.user_data['comment_art_id'] = None
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await update.message.reply_text("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üìù")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∞—Ä—Ç–æ–≤
            await send_art_to_user(chat_id, context, user_id)
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–Ω–æ–≤–∞.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ç–æ–≤)"""
    user_id = update.effective_user.id
    
    if context.user_data.get('waiting_for_art'):
        file_id = update.message.photo[-1].file_id
        caption = update.message.caption or ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä—Ç –≤ –±–∞–∑—É
        art_id = add_art(user_id, file_id, caption)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['waiting_for_art'] = False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ –¢–≤–æ–π –∞—Ä—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! (ID: {art_id})\n"
            "–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –µ–≥–æ –æ—Ü–µ–Ω–∏—Ç—å!",
            reply_markup=reply_markup
        )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
    